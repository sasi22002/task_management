"""
Django settings for configuration project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import environ,os
from datetime import datetime,timedelta
import logging
import threading
    


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#Read the setting configuration file based on env key value
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

if env('environment')==str('development'):
    from task_management.development import *
if env('environment')==str("production"):
    from task_management.production import *

    

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECERET_KEYS

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED SITES
ALLOWED_HOSTS = list(CONFIG['ALLOWED_HOST'])


CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]



# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:4200",
#     "http://13.233.154.133:8000"
# ]



# Use a threading-specific formatter to include thread information in log messages
class ThreadFormatter(logging.Formatter):
    def format(self, record):
        record.threadName = threading.current_thread().name
        return super().format(record)
    
    
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'taskapp',
    'django_user_agents',
    'corsheaders',

    ]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.custom_middleware.LoginRequiredMiddleware',
    'utils.custom_middleware.ActivityLogMiddleware',
    'utils.custom_middleware.CustomSessionMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    
]

ROOT_URLCONF = 'task_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': DATABSE_CONFIG['ENGINE'],
        'NAME': DATABSE_CONFIG['NAME'],
        'USER' : DATABSE_CONFIG['USER'],
        'PASSWORD' : DATABSE_CONFIG['PASSWORD'],
        'HOST' : DATABSE_CONFIG['HOST'],
        'PORT' : DATABSE_CONFIG['PORT'],
        'POOL_OPTIONS' : {
            'POOL_SIZE': 10,
            'MAX_OVERFLOW': 10,
            'RECYCLE': 24 * 60 * 60
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#REST_FRAMEWORK

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}


#ADMIN DETAILS
ADMINS = [
    (ADMIN_USERNAME,ADMIN_EMAIL)
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# default static settings
STATIC_URL = '/static/css/'
# STATIC_ROOT = BASE_DIR.joinpath('staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# default media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR.joinpath('mediafiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



#EMAIL CREDENTIALS

EMAIL_BACKEND = str(EMAIL_CONFIG["EMAIL_BACKEND"])
EMAIL_HOST = EMAIL_CONFIG["EMAIL_HOST"]
EMAIL_USE_TLS = EMAIL_CONFIG["EMAIL_USE_TLS"]
EMAIL_PORT = EMAIL_CONFIG["EMAIL_PORT"]
EMAIL_HOST_USER = EMAIL_CONFIG["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = EMAIL_CONFIG["EMAIL_HOST_PASSWORD"]
DEFAULT_FROM_EMAIL = EMAIL_CONFIG['DEFAULT_FROM_EMAIL']



DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL='taskapp.User'

#Authentication backends
AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
    )

#JWT AUTH DETAILS

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=50),
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(minutes=1),
}


PASSWORD_RESET_TIMEOUT =int(PASSWORD_RESET_TIME)
PASSWORD_RESET_LINK = PASSWORD_RESET_URL
SERVER_URL = SERVER_URL

FIRE_BASE = FIRE_BASE


#LOGGING
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    "handlers": {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false']
        },
       
        "user_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(BASE_DIR)+ "\Log\\api_access.log".format(datetime.now()),
            "formatter": "app",
            'maxBytes': 18000000 , # 0.1 MB
            'backupCount': 3, # Keep 3 file      
            "mode": "a",
            
        },
        "all_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(BASE_DIR)+ "\Log\\all_file.log".format(datetime.now()),
            "formatter": "app",
            'maxBytes': 18000000 , # 0.1 MB
            'backupCount': 3, # Keep 3 file      
            "mode": "a",
 
        },
        "django_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(BASE_DIR)+ "\Log\\thread_file.log".format(datetime.now()),
            "formatter": "threaded",
            'maxBytes': 18000000 , # 0.1 MB
            'backupCount': 3, # Keep 3 file      
            "mode": "a",
            
        },
    },
    "loggers": {
        "django.server": {
            "handlers": ["django_file"],
            "level": "INFO",
            "propagate": True
        },
        'django':{
            'handlers':['all_file'],
            'level':'INFO',
            'propagate': True
            },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'api_access': {
            'handlers': ['user_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'thread_access': {
            'handlers': ['django_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.masteradmin.views':
        {
            'handlers': ['all_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.customer.chat':
        {
            'handlers': ['all_file'],
            'level': 'INFO',
            'propagate': True,
        },
        },
    "formatters": {
        "app": {
            "format": (
                u"%(asctime)s [%(levelname)-8s] "
                "(%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "custom": {
            "format":'[{pathname}:{funcName}:{lineno:d}] {message}',
            "style":'{',
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        'threaded': {
            '()': ThreadFormatter,
            'format': '[%(asctime)s] [%(levelname)s] [%(threadName)s] %(message)s',
        },

    },
    "root": {
            "level": "INFO",
            'handlers':['all_file'],    
            'formatter':"app"
    }
}
ASGI_APPLICATION = "task_management.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}

